from .training_pipeline import training_model, window_from_data
from tensorboard.plugins.hparams import api as hp
import tensorflow as tf

import logging
import os


logger = logging.getLogger(__name__)


lstm_generator = lambda multipl: lambda: tf.keras.Sequential(
    [
        tf.keras.layers.LSTM(int(84 * 2 * multipl), return_sequences=False),
        tf.keras.layers.Dense(84 * 2),
        tf.keras.layers.Reshape([84, 2]),
    ]
)

def parrallel_lstm_generator(multipl):
    input_shape = tf.keras.Input(shape=(28, 7))
    
    tower_1 = tf.keras.layers.LSTM(int(84*multipl), return_sequences=False)(input_shape)
    out_1 = tf.keras.layers.Dense(84)(tower_1)
    out_11 = tf.keras.layers.Reshape([84, 1])(out_1)

    tower_2 = tf.keras.layers.LSTM(int(84*multipl), return_sequences=False)(input_shape)
    out_2 = tf.keras.layers.Dense(84)(tower_2)
    out_22 = tf.keras.layers.Reshape([84, 1])(out_2)

    out = tf.concat([out_11, out_22], axis=-1)
    base_ = tf.keras.Model(inputs=input_shape, outputs=out)

    return lambda: tf.keras.Sequential([base_])






window_ = window_from_data()

HP_CELLS_MULTIPL = hp.HParam(
    "x_cells", hp.Discrete([1, 3, 5])
)
HP_MODEL = hp.HParam('Model_Framework', hp.Discrete(['parallel', 'classic']))
HP_LOSS = hp.HParam("Loss", hp.Discrete(["percent_max","mse", "mae"]))

MAE = "Average MAE"
MAE_percent = "Average MAE %"
MAX_mae_percent = "Max MAE%"

def train_test_model(hparams):
    
    optimizer = tf.optimizers.Adam()#learning_rate=4e-4)
    callback_mod = "EarlyStopping"
    
    #if hparams[HP_OPTI] == "Adam":
    #    optimizer = tf.optimizers.Adam()#learning_rate=4e-4)
    #    callback_mod = "EarlyStopping"
    #elif hparams[HP_OPTI] == "SGD":
    #    optimizer = tf.optimizers.SGD(learning_rate=1e-3)
    #    callback_mod = "EarlyStopping"
        
    loss_mod = hparams[HP_LOSS]
    if hparams[HP_MODEL] == 'classic':
        model_generator = lstm_generator(hparams[HP_CELLS_MULTIPL])
        #loss_mod='classic'
    elif hparams[HP_MODEL] == 'parallel':
        model_generator = parrallel_lstm_generator(hparams[HP_CELLS_MULTIPL])
        #loss_mod='parallel_max'

    model_name = "{}_{} xcells_{} model".format(hparams[HP_LOSS], hparams[HP_CELLS_MULTIPL], hparams[HP_MODEL])
    
    val_performance, _ = training_model(
        model_generator=model_generator, window_=window_, model_name=model_name, MAX_EPOCHS=400, loss_mod=loss_mod, optimizer=optimizer
    )
    return val_performance


def run(run_dir, hparams):
    with tf.summary.create_file_writer(run_dir).as_default():
        hp.hparams(hparams)  # record the values used in this trial
        val_performance = train_test_model(hparams)

        mae_ = val_performance[1]
        mae_percent_ = val_performance[2]
        max_mae_percent_ = val_performance[3]

        tf.summary.scalar(MAE, mae_, step=1)
        tf.summary.scalar(MAE_percent, mae_percent_, step=1)
        tf.summary.scalar(MAX_mae_percent, max_mae_percent_, step=1)



def tensorboard_gen():
      
    with tf.summary.create_file_writer("logs/hparam_tuning").as_default():
        hp.hparams_config(
            hparams=[HP_CELLS_MULTIPL, HP_MODEL, HP_LOSS],
            metrics=[
                hp.Metric(MAE, display_name="Average MAE"),
                hp.Metric(MAE_percent, display_name="Average MAE %"),
                hp.Metric(MAX_mae_percent, display_name="Max MAE%"),
            ],
        )


    session_num = 0
    for model_type in HP_MODEL.domain.values:
        for mult_cells in HP_CELLS_MULTIPL.domain.values:
            for loss_mod in HP_LOSS.domain.values:
                hparams = {
                    HP_CELLS_MULTIPL: mult_cells,
                    HP_MODEL: model_type,
                    HP_LOSS: loss_mod,
                }
                #run_name = "run-%d" % session_num
                
                run_name = "run {}: {}_{} xcells_{} model".format(session_num, loss_mod, mult_cells, model_type)
                
                
                logger.info("--- Starting trial: %s" % run_name)
                logger.info({h.name: hparams[h] for h in hparams})
                run("logs/hparam_tuning/" + run_name, hparams)
                session_num += 1
